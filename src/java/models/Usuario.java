package models;
// Generated 28-ene-2013 9:08:15 by Hibernate Tools 3.2.1.GA

//import BORRAR_clasesOLD.*;
import comun.HibernateUtil;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
// javax.faces.application.FacesMessage;
import org.hibernate.Query;
import org.hibernate.Session;
//import comun.MailController;
import javax.faces.context.FacesContext;
/**
 * Usuario generated by hbm2java
 */
public class Usuario  implements java.io.Serializable {

//private HibernateUtil hbUtil;//= new HibernateUtil();

     private BigDecimal codusuario;
     private Roles roles;
     private String nombre;
     private String password;
     private String email;
     private String direccion;
     private String telefono;
     private BigDecimal intentos;
     private String estado;
     private String fhbloqueo;
     private String usuario;
     private String Error;
     Session session = null;

    public Usuario() {
     //hbUtil= new HibernateUtil();
     if (session == null || session.isOpen() == false) 
        this.session = HibernateUtil.getSessionFactory().openSession();
     else
        this.session = HibernateUtil.getSessionFactory().getCurrentSession();
    
     
    }

	
    public Usuario(BigDecimal codusuario) {
        this.codusuario = codusuario;
    }
    public Usuario(BigDecimal codusuario, Roles roles, String nombre, String password, String email, String direccion, String telefono, BigDecimal intentos, String estado, String fhbloqueo, String usuario) {
       this.codusuario = codusuario;
       this.roles = roles;
       this.nombre = nombre;
       this.password = password;
       this.email = email;
       this.direccion = direccion;
       this.telefono = telefono;
       this.intentos = intentos;
       this.estado = estado;
       this.fhbloqueo = fhbloqueo;
       this.usuario = usuario;
    }

    public String getError() {
        return Error;
    }

    public void setError(String Error) {
        this.Error = Error;
    }
   
    public BigDecimal getCodusuario() {
        return this.codusuario;
    }
    
    public void setCodusuario(BigDecimal codusuario) {
        this.codusuario = codusuario;
    }
    public Roles getRoles() {
        return this.roles;
    }
    
    public void setRoles(Roles roles) {
        this.roles = roles;
    }
    public String getNombre() {
        return this.nombre;
    }
    
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }
    public String getDireccion() {
        return this.direccion;
    }
    
    public void setDireccion(String direccion) {
        this.direccion = direccion;
    }
    public String getTelefono() {
        return this.telefono;
    }
    
    public void setTelefono(String telefono) {
        this.telefono = telefono;
    }
    public BigDecimal getIntentos() {
        return this.intentos;
    }
    
    public void setIntentos(BigDecimal intentos) {
        this.intentos = intentos;
    }
    public String getEstado() {
        return this.estado;
    }
    
    public void setEstado(String estado) {
        this.estado = estado;
    }
    public String getFhbloqueo() {
        return this.fhbloqueo;
    }
    
    public void setFhbloqueo(String fhbloqueo) {
        this.fhbloqueo = fhbloqueo;
    }
    public String getUsuario() {
        return this.usuario;
    }
    
    public void setUsuario(String usuario) {
        this.usuario = usuario;
    }

/******Nuevo para login de acceso*********************/
      public String getUsuario(String usu, String passw){
        String resultado;
        Usuario usuarioLogin = new Usuario();
          try {
            org.hibernate.Transaction tx = session.beginTransaction();
            Query q = session.createQuery("from Usuario where USUARIO='" + usu +"'");
            if (q.uniqueResult()==null)
           {
               this.Error="El usuario introducido, no existe.";
                FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("LoginError", "El usuario introducido, no existe.");
               resultado="error";
           }
          else
           {
             
               usuarioLogin = (Usuario) q.uniqueResult();
               // this.Error="else de getusuario";
               resultado= comprobaciones(passw,usuarioLogin);
            
           }
           
                

        } catch (Exception e) {
              this.Error="Catch Usuario.getUsuario : " + e.toString() ;
                       //FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("LoginError", "Catch : " + e.toString());
              resultado="error";
        }
return resultado;
    }

 
 
    private String comprobaciones(String contr, Usuario usu) {
      //   System.out.println("ENTRO en comprobaciones");
        usu.Error="";
         String resultado = "";
          if (usu.estado.equals("B")){
           // System.out.println("ENTRO en comprobaciones if de baja");
            
            this.Error="Su usuario ha sido dado de baja, consulte al Administrador";
            FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("LoginError", "Su usuario ha sido dado de baja, consulte al Administrador");
               
            resultado = "error";          
        } 
        else if (usu.fhbloqueo!=null){
             try {
                String fecha = usu.fhbloqueo.toString();
               SimpleDateFormat sdf = new SimpleDateFormat("dd/mm/yy kk:mm");
               java.util.Date d = sdf.parse(fecha);
               String fecha3 = DateFormat.getInstance().format(new Date()).toString();
               SimpleDateFormat sdf3 = new SimpleDateFormat("dd/mm/yy kk:mm");
               java.util.Date d3 = sdf3.parse(fecha3);
               long diferenciaMils = d3.getTime() - d.getTime();
               long difDias = diferenciaMils / 86400000L;
               long segundos = diferenciaMils / 1000;
               long horas = segundos / 3600;
               segundos -= horas * 3600;
               long minutos = segundos / 60;
               if (difDias > 0 || horas > 0 || minutos > 5){//30) {
                    //Han pasado mas de 30min, borrar bloqueo y ver si el pass es correcto
                    org.hibernate.Transaction tx = session.beginTransaction();
                    usu.fhbloqueo = "";
                    usu.intentos=new BigDecimal(0);
                    
                    try {
                        tx.commit();
                    } catch (Exception e) {
                       this.Error="Error al eliminar Bloqueo, consulte al administrador";
                       FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("LoginError",  "Error al eliminar Bloqueo, consulte al administrador");
                       resultado = "error";
                    }
                } 
                else {
                   this.Error="Su usuario ha sido bloqueado momentaneamente, por error al introducir el password, podrá entrar en " + Long.toString(30 - minutos) + " minutos";
                   FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("LoginError", "Su usuario ha sido bloqueado momentaneamente, por error al introducir el password, podrá entrar en " + Long.toString(30 - minutos) + " minutos");
                    resultado = "error";
                }
            } catch (Exception e) {
                 System.out.println("ENTRO en comprobaciones catch");
                this.Error=e.toString();
                FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("LoginError", e.toString());
                resultado = "error";
            }  
             
             
        }
          //vemos si está bloqueado o dado de baja para ver si hay que comprobar el password
          // if(this.Error.toString().length()==0)
         if(resultado.length()==0)
            { // System.out.println("ENTRO en comprobaciones if de error long =0");
                if(contr.equals(usu.password)==true)//no hay errores anteriores y el password es correcto
                {  
                    resultado=usu.roles.getCodrol().toString();
                   
                }
                else//el password no es correcto
                {    
                   int intentos2=0;
                   if (usu.intentos!=null)
                        intentos2=usu.intentos.intValue()+1;
                   else
                        intentos2=1;

                       this.Error="Contraseña Incorrecta le quedan "+String.valueOf(3-intentos2)+" intentos";
                        FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("LoginError", "Contraseña Incorrecta le quedan "+String.valueOf(3-intentos2)+" intentos");
                        resultado="error";
                        org.hibernate.Transaction tx = session.beginTransaction();
                        usu.setIntentos(new BigDecimal(intentos2)); 



                         if(intentos2>2)
                          {
                             // System.out.println("3-intentos mas de 2---El passw no es correcto intentos="+intentos);

                            usu.setFhbloqueo( DateFormat.getInstance().format(new Date()).toString());
                          //   System.out.println("4-intentos mas de 2---El passw no es correcto intentos="+intentos);

                            usu.setIntentos(new BigDecimal(1)); 

                          //  System.out.println("5-intentos mas de 2---El passw no es correcto intentos="+intentos);

                           }
                        try {
                            tx.commit();
                        } catch (Exception e) {
                          this.Error="Error al sumar intentos, consulte al administrador";
                           FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("LoginError", "Error al sumar intentos, consulte al administrador");
                            resultado = "error";
                        }
                    
            }
          
        }
          /* else
           {
           this.Error=this.Error+"esta bien pero tenia errores de antes en la bbdd errores="+usu.intentos;
           } */
         this.Error=this.Error+" resultado="+resultado;
       return resultado;
    }
    
 public String getUsuarioCorreo(String email){
   //  System.out.println("getUsuarioCorreogetUsuarioCorreogetUsuarioCorreogetUsuarioCorreogetUsuarioCorreogetUsuarioCorreogetUsuarioCorreogetUsuarioCorreo");
        String resultado="";
        //MailController mc=new MailController();
        Usuario usuarioLogin = new Usuario();
        
          try {
            org.hibernate.Transaction tx = session.beginTransaction();
            Query q = session.createQuery("from Usuario where email='" + email +"'");
            if (q.uniqueResult()==null)
           {
               this.Error="El correo introducido no corresponde a ningún usuario.";
              // FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("LoginError",  "El correo introducido no pertenece a ningún usuario registrado");
                FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("LoginCorreoError",  "El correo introducido no pertenece a ningún usuario registrado");
              System.out.println("EMAIL MAL");
              
               resultado="error";
           }
          else
           {
               usuarioLogin = (Usuario) q.uniqueResult();
               //enviar correo con los datos
               //System.out.println("email222="+usuarioLogin.getEmail()+" usu="+usuarioLogin.getUsuario()+" pass="+usuarioLogin.getPassword());
               resultado="Usuario="+usuarioLogin.getUsuario()+" Passwword="+usuarioLogin.getPassword();
               FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("LoginCorreoError",  "El correo introducido es correcto");
          
            //   resultado=mc.sendMail();//Recordatorio(usuarioLogin.getEmail(),usuarioLogin.getUsuario(),usuarioLogin.getPassword());
              // System.out.println("email222333="); 
           }
           
                

        } catch (Exception e) {
              this.Error="Catch Usuario.getUsuarioEmail : " + e.toString() ;
             resultado="error";
        }
          return resultado;
    }
 
    public void cerrarSesion() {
        FacesContext context = FacesContext.getCurrentInstance();
        context.getExternalContext().getSessionMap().clear();
        FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put("isSesionAlive", false);
        try {
            context.getExternalContext().redirect("/GestionPericial2");         
        } 
        catch (IOException ex) {
             this.Error="Error en cerrar sesion de usuario : " + ex.toString() ;             
        }      
    } 
 

}


